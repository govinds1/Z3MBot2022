// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/Intake.h"
#include <frc/smartdashboard/SmartDashboard.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Intake::Intake(){
    SetName("Intake");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SetSubsystem("Intake");

    AddChild("motor", &m_motor);
    m_motor.SetInverted(false);
    m_motor.ConfigPeakOutputForward(kIntakeSpeed);
    m_motor.ConfigPeakOutputReverse(-kIntakeSpeed);

    AddChild("wrist", &m_wrist);
    m_wrist.SetInverted(true);
    m_wrist.ConfigPeakOutputForward(kWristSpeed);
    m_wrist.ConfigPeakOutputReverse(-kWristSpeed);

    // TODO: set soft limit for wrist encoder
    
    frc::SmartDashboard::PutBoolean("Subsystems/Intake/Running", false);
    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Idle");
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Intake::Periodic() {
    // Put code here to be run every loop
}

void Intake::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

}

void Intake::Run() {
    frc::SmartDashboard::PutBoolean("Subsystems/Intake/Running", true);
    m_motor.Set(kIntakeSpeed);
}

void Intake::Stop() {
    frc::SmartDashboard::PutBoolean("Subsystems/Intake/Running", false);
    m_motor.Set(0.0);
}

void Intake::MoveWristDown() {
    if (lowerLimitSwitch.Get()) {
        StopWrist();
        return;
    }

    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Lowering");
    m_wrist.Set(kWristSpeed);
}

void Intake::MoveWristUp() {
    // TODO: check for limit switch
    if (upperLimitSwitch.Get()) {
        StopWrist();
        return;
    }

    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Raising");
    m_wrist.Set(-kWristSpeed);
}

void Intake::StopWrist() {
    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Idle");
    m_wrist.Set(0);
}