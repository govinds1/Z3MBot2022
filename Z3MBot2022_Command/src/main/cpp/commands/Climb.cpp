#include "commands/Climb.h"

Climb::Climb(MotorsToRun toRun, bool forward, Climber* m_climber)
:m_climber(m_climber),
m_toRun(toRun),
m_forward(forward){

    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("Climb");
    AddRequirements({m_climber});

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

}

// Called just before this Command runs the first time
void Climb::Initialize() {
    if (m_toRun == MotorsToRun::One) {
        m_climber->RunMotor1(m_forward);
    } else if (m_toRun == MotorsToRun::Two) {
        m_climber->RunMotor2(m_forward);
    }
}

// Called repeatedly when this Command is scheduled to run
void Climb::Execute() {
}

// Make this return true when this Command no longer needs to run execute()
bool Climb::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Climb::End(bool interrupted) {
    m_climber->Stop();
}

bool Climb::RunsWhenDisabled() const {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
}
