// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

#include "Robot.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <frc2/command/CommandScheduler.h>

void Robot::RobotInit() {}

/**
 * This function is called every robot packet, no matter the mode. Use
 * this for items like diagnostics that you want to run during disabled,
 * autonomous, teleoperated and test.
 *
 * <p> This runs after the mode specific periodic functions, but before
 * LiveWindow and SmartDashboard integrated updating.
 */
void Robot::RobotPeriodic() { frc2::CommandScheduler::GetInstance().Run(); }

/**
 * This function is called once each time the robot enters Disabled mode. You
 * can use it to reset any subsystem information you want to clear when the
 * robot is disabled.
 */
void Robot::DisabledInit() {}

void Robot::DisabledPeriodic() {}

/**
 * This autonomous runs the autonomous command selected by your {@link
 * RobotContainer} class.
 */
void Robot::AutonomousInit() {
  m_autonomousCommand = m_container->GetAutonomousCommand();

  if (m_autonomousCommand != nullptr) {
    m_autonomousCommand->Schedule();
  }
}

void Robot::AutonomousPeriodic() {}

void Robot::TeleopInit() {
  // This makes sure that the autonomous stops running when
  // teleop starts running. If you want the autonomous to
  // continue until interrupted by another command, remove
  // this line or comment it out.
  if (m_autonomousCommand != nullptr) {
    m_autonomousCommand->Cancel();
    m_autonomousCommand = nullptr;
  }
  //TankDrive tankCmd = TankDrive();

}

/**
 * This function is called periodically during operator control.
 */
void Robot::TeleopPeriodic() {
  //Uncomment things if Commands don't work

  //frc::XboxController* controller = m_container->getxboxController();
  
  // Driving
  //m_container->m_driveBase.TankDriveFunc(controller->GetLeftY(), controller->GetRightY());

  //Intake Roller
  // if (controller->GetRawButton(ControllerConstants::kIntakeButton)) {
  //   m_container->m_intake.Run();
  // } else {
  //   m_container->m_intake.Stop();
  // }
  //Intake Wrist
  // if (controller->GetLeftTriggerAxis() >= 0.1) {
  //   m_container->m_intake.MoveWristDown();
  // }
  // if (controller->GetRightTriggerAxis() >= 0.1) {
  //   m_container->m_intake.MoveWristUp();
  // }
  
  //Tunnel
  // if (controller->GetRawButton(ControllerConstants::kTunnelButton)) {
  //   m_container->m_tunnel.Run();
  // } else {
  //   m_container->m_tunnel.Stop();
  // }

  //Shooter
  // if (controller->GetRawButton(ControllerConstants::kShootButton)) {
  //   m_container->m_shooter.Run();
  // } else {
  //   m_container->m_shooter.Stop();
  // }

  // //Climber
  // if (controller->GetRawButton(ControllerConstants::kClimb1Button)) {
  //   m_container->m_climber.RunMotor1();
  // } else {
  //   m_container->m_climber.StopMotor1();
  // }
  // if (controller->GetRawButton(ControllerConstants::kClimb2Button)) {
  //   m_container->m_climber.RunMotor2();
  // } else {
  //   m_container->m_climber.StopMotor2();
  // }
}

/**
 * This function is called periodically during test mode.
 */
void Robot::TestPeriodic() {}

#ifndef RUNNING_FRC_TESTS
int main() { return frc::StartRobot<Robot>(); }
#endif
