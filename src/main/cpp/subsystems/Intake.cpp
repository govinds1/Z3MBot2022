// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/Intake.h"
#include <frc/smartdashboard/SmartDashboard.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Intake::Intake(){
    SetName("Intake");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SetSubsystem("Intake");

    AddChild("motor", &m_motor);
    m_motor.SetInverted(false);
    m_motor.ConfigPeakOutputForward(kIntakeSpeed);
    
    frc::SmartDashboard::PutBoolean("Subsystems/Intake/Running", false);
    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Idle");
    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/Location", "Up");
    currentWristState = WristMovingState::Idle;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Intake::Periodic() {
    // Put code here to be run every loop
    CheckForLimit();
}

void Intake::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

}

void Intake::Run() {
    frc::SmartDashboard::PutBoolean("Subsystems/Intake/Running", true);
    m_motor.Set(kIntakeSpeed);
}

void Intake::Stop() {
    frc::SmartDashboard::PutBoolean("Subsystems/Intake/Running", false);
    m_motor.Set(0.0);
}

void Intake::MoveWristDown() {
    if (currentWristState == WristMovingState::Lowering || GetWristLocation() == WristLocation::Down) return;
    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Lowering");
    m_wrist.Set(kWristSpeed);
    currentWristState = WristMovingState::Lowering;
}

void Intake::MoveWristUp() {
    if (currentWristState == WristMovingState::Raising || GetWristLocation() == WristLocation::Up) return;
    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Raising");
    m_wrist.Set(-kWristSpeed);
    currentWristState = WristMovingState::Raising;
}

void Intake::StopWrist() {
    frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/MovingState", "Idle");
    m_wrist.Set(0);
    currentWristState = WristMovingState::Idle;
}

void Intake::CheckForLimit() {
    if (GetWristLocation() == WristLocation::Down && currentWristState == WristMovingState::Lowering) {
        StopWrist();
    } else if (GetWristLocation() == WristLocation::Up && currentWristState == WristMovingState::Raising) {
        StopWrist();
    } else if (GetWristLocation() == WristLocation::Error) {
        StopWrist();
    }
}

Intake::WristLocation Intake::GetWristLocation() {
    //return WristLocation::Up;
    if (upperLimitSwitch.Get() && lowerLimitSwitch.Get()) {
        // Somehow hitting both -> Error
        frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/Location", "Error");
        StopWrist();
        return WristLocation::Error;
    } else if (upperLimitSwitch.Get()) {
        frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/Location", "Up");
        return WristLocation::Up;
    } else if (lowerLimitSwitch.Get()) {
        frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/Location", "Down");
        return WristLocation::Down;
    } else {
        frc::SmartDashboard::PutString("Subsystems/Intake/Wrist/Location", "Middle");
        return WristLocation::Middle;
    }
}